# CRDs are installed separately during the bootstrap process, so we disable them here.
crds:
  enabled: false

# Disable the ServiceMonitors for control plane components that are not exposing metrics
# in this cluster setup. This will clean up the "DOWN" targets in the Prometheus UI.
kubeControllerManager:
  enabled: false

kubeScheduler:
  enabled: false

kubeProxy:
  enabled: false

kubeEtcd:
  enabled: false

# Ensure heavy monitoring components are scheduled only on worker nodes
# by adding an affinity rule that avoids nodes with the control-plane role.
prometheus:
  prometheusSpec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: DoesNotExist
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi

grafana:
  # Use the existing grafana secret for admin credentials
  admin:
    existingSecret: "kube-prometheus-stack-grafana"

  ingress:
    enabled: true
    ingressClassName: "nginx" # Make sure this matches your Ingress Controller
    hosts:
      - grafana-dev.serit.dev
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: DoesNotExist

  # Configure grafana.ini settings to allow anonymous access.
  # This is great for making dashboards publicly viewable without a login.
  grafana.ini:
    auth.anonymous:
      enabled: true
      # The organization name for anonymous users.
      org_name: Main Org.
      # Assign the 'Viewer' role to anonymous users. They can view, but not edit.
      org_role: Viewer

  # Set the env var directly to ensure the plugin is installed.
  env:
    GF_INSTALL_PLUGINS: grafana-service-graph-panel

  # Add Tempo as a datasource in Grafana
  additionalDataSources:
    - name: Tempo
      type: tempo
      uid: tempo
      url: http://{{ .Release.Name }}-tempo.monitoring.svc.cluster.local:3200
      jsonData:
        serviceMap:
          datasourceUid: 'prometheus'

alertmanager:
  alertmanagerSpec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: DoesNotExist
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
